{namespace atlassian.form}

/**
 * @param content
 * @param action
 * @param? method
 * @param? enctype
 * @param? isUnsectioned
 * @param? isLongLabels
 * @param? isTopLabels
 * @param? id
 * @param? extraClasses
 * @param? extraAttributes
 */
{template .form}
    <form{if $id} id="{$id}"{/if} class="aui{if $isUnsectioned} unsectioned{/if}{if $isLongLabels} long-label{/if}{if $isTopLabels} top-label{/if}{call atlassian.renderExtraClasses data="all" /}"
          action="{$action}" method="{$method ? $method : 'post'}"{if $enctype}enctype="{$enctype}"{/if}{call atlassian.renderExtraAttributes data="all" /}>
        {$content |noAutoescape}
    </form>
{/template}

/**
 * A place for arbitrary description HTML within a form.
 * @param content
 * @param? id
 * @param? extraClasses
 * @param? extraAttributes
 */
{template .formDescription}
    <div{if $id} id="{$id}"{/if} class="field-group{call atlassian.renderExtraClasses data="all" /}"
        {call atlassian.renderExtraAttributes data="all" /}>
        {$content |noAutoescape}
    </div>
{/template}

/**
 * @param legendContent
 * @param content
 * @param? isInline Only one of isInline, isDateSelect, and isGroup can be specified.
 * @param? isDateSelect Only one of isInline, isDateSelect, and isGroup can be specified.
 * @param? isGroup Only one of isInline, isDateSelect, and isGroup can be specified.
 * @param? id
 * @param? extraClasses
 * @param? extraAttributes
 */
{template .fieldset}
    {let $hasClass : $isInline or $isDateSelect or $isGroup or $extraClasses /}
    <fieldset{if $id} id="{$id}"{/if}
        {if $hasClass} class="
            {$isInline ? 'inline' : $isDateSelect ? 'date-select' : $isGroup ? 'group' : ''}
            {call atlassian.renderExtraClasses data="all" /}
        "{/if}
        {call atlassian.renderExtraAttributes data="all" /}>
        <legend><span>{$legendContent |noAutoescape}</span></legend>
        {$content |noAutoescape}
    </fieldset>
{/template}

/**
 * @param content
 * @param? id
 * @param? extraClasses
 * @param? extraAttributes
 */
{template .fieldGroup}
    <div{if $id} id="{$id}"{/if} class="field-group{call atlassian.renderExtraClasses data="all" /}"
     {call atlassian.renderExtraAttributes data="all" /}>
        {$content|noAutoescape}
    </div>
{/template}

/**
 * @param content
 * @param? alignment 'left' or 'right' to align buttons to the left or right edge of the form.
 *                   Default is to align the left edge of the buttons with the left edge of the form field column.
 */
{template .buttons}
    <div class="buttons-container{if $alignment} {$alignment}{/if}">
        <div class="buttons">
            {$content |noAutoescape}
        </div>
    </div>
{/template}


/**
 * @param forField id of the input this label is for.
 * @param content
 * @param isRequired
 * @param? id
 * @param? extraClasses
 * @param? extraAttributes
 */
{template .label}
    <label{if $id} id="{$id}"{/if} for="{$forField}"{call atlassian.renderExtraClasses data="all"}{param fullAttr: true/}{/call}
        {call atlassian.renderExtraAttributes data="all" /}>
        {$content |noAutoescape}
        {if $isRequired}
            <span class="aui-icon icon-required"></span>
        {/if}
    </label>
{/template}

/**
 * @param? id At least one of $id or $name is required.
 * @param? name At least one of $id or $name is required. $name defaults to $id if not provided.
 * @param type a valid value fo the <input/>'s type attribute. HTML5 new types aren't yet supported.
 * @param? value
 * @param? maxLength (only valid for text)
 * @param? size (only valid for text)
 * @param? isChecked (only valid for checkboxes or radio buttons)
 * @param? isDisabled
 * @param? extraClasses
 * @param? extraAttributes
 */
{template .input}
    <input{if $id} id="{$id}"{/if} class="{$type == 'password' ? 'text' : $type == 'submit' ? 'button' : $type}{call atlassian.renderExtraClasses data="all" /}"
           type="{$type}" name="{if $name}{$name}{else}{$id}{/if}"
           {if $value} value="{$value}"{/if}
           {if ($type == 'checkbox' or $type == 'radio') and $isChecked} checked="checked"{/if}
           {if ($type == 'text') and $maxLength} maxlength="{$maxLength}"{/if}
           {if ($type == 'text') and $size} size="{$size}"{/if}
           {if $isDisabled} disabled{/if}
           {call atlassian.renderExtraAttributes data="all" /}/>
{/template}

/**
 * @param? id At least one of $id or $name is required.
 * @param? name At least one of $id or $name is required. $name defaults to $id if not provided.
 * @param text
 * @param? isDisabled
 * @param? extraClasses
 * @param? extraAttributes
 */
{template .submit}
    {call .input}
        {param id: $id /}
        {param name: $name /}
        {param type: 'submit' /}
        {param value: $text /}
        {param isDisabled: $isDisabled /}
        {param extraClasses: $extraClasses /}
        {param extraAttributes: $extraAttributes /}
    {/call}
{/template}

/**
 * @param? id At least one of $id or $name is required.
 * @param? name At least one of $id or $name is required. $name defaults to $id if not provided.
 * @param text
 * @param? isDisabled
 * @param? extraClasses
 * @param? extraAttributes
 */
{template .button}
    {call .input}
        {param id: $id /}
        {param name: $name /}
        {param type: 'button' /}
        {param value: $text /}
        {param isDisabled: $isDisabled /}
        {param extraClasses: $extraClasses /}
        {param extraAttributes: $extraAttributes /}
    {/call}
{/template}

/**
 * @param? id At least one of $id or $name is required.
 * @param? name At least one of $id or $name is required. $name defaults to $id if not provided.
 * @param? url default is '#'
 * @param text
 * @param? extraClasses
 * @param? extraAttributes
 */
{template .linkButton}
    <a{if $id} id="{$id}"{/if} name="{$name ? $name : $id}" href="{$url ? $url : '#'}" class="cancel{call atlassian.renderExtraClasses data="all" /}"
        {call atlassian.renderExtraAttributes data="all" /}>
        {$text}
    </a>
{/template}

/**
 * @param? id At least one of $id or $name is required.
 * @param? name At least one of $id or $name is required. $name defaults to $id if not provided.
 * @param? rows
 * @param? cols
 * @param? isDisabled
 * @param? value
 * @param? extraClasses
 * @param? extraAttributes
 */
{template .textarea}
    <textarea{if $id} id="{$id}"{/if} name="{if $name}{$name}{else}{$id}{/if}" class="textarea{call atlassian.renderExtraClasses data="all" /}"
           {if $rows} rows="{$rows}"{/if}{if $cols} cols="{$cols}"{/if}{if $isDisabled} disabled{/if}
           {call atlassian.renderExtraAttributes data="all" /}>
           {if $value}{$value}{/if}
    </textarea>
{/template}

/**
 *
 * Renders a <select/> element containing <optgrpup> and <option> elements.
 *
 * Example value for the $options param: [
 *      [
 *          text 'My Optgroup 1',
 *          options : [
 *              [ text : 'My Option 1 in group 1', value : '1.1' ],
 *              [ text : 'My Option 2 in group 1', value : '1.2', selected : true ]
 *          ]
 *      ],
 *      [ text : 'My Option 2', value : '2' ]
 *  ]
 *
 * renders
 *
 * <select>
 *      <optgroup label="My Optgroup 1">
 *          <option value="1.1">My Option 1 in group 1</option>
 *          <option value="1.2">My Option 2 in group 1</option>
 *      </optgroup>
 *      <option value="2">My Option 2</option>
 * </select>
 *
 * @param? id At least one of $id or $name is required.
 * @param? name At least one of $id or $name is required. $name defaults to $id if not provided.
 * @param? isDisabled
 * @param? isMultiple whether multiple selections are allowed.
 * @param? size
 * @param options a tree containing internal nodes like [text : 'My OptGroup', options], and leaf nodes like [ text : 'My Option', value : '1']
 * @param? extraClasses
 * @param? extraAttributes
 */
{template .select}
    <select{if $id} id="{$id}"{/if} name="{if $name}{$name}{else}{$id}{/if}" class="{$isMultiple ? 'multi-select' : 'select'}{call atlassian.renderExtraClasses data="all" /}"
        {if $size} size="{$size}"{/if}{if $isDisabled} disabled{/if}{if $isMultiple} multiple{/if}
        {call atlassian.renderExtraAttributes data="all" /}>
        {foreach $option in $options}
            {call .optionOrOptgroup data="$option" /}
        {/foreach}
    </select>
{/template}

/**
 * Not meant for direct public usage.
 *
 * @param text text for the option or optgroup
 * @param? options Exactly one of $options and $value must be specified. if provided, this template will render an optgroup.
 * @param? value Exactly one of $options and $value must be specified. If provided, this tempalte will render an option
 * @param? selected Only valid for options, not optgroups.
 */
{template .optionOrOptgroup private="true"}
    {if $options}
        <optgroup label="{$text}">
            {foreach $option in $options}
                {call .optionOrOptgroup data="$option" /}
            {/foreach}
        </optgroup>
    {else}
        <option value="{$value}" {if $selected}selected{/if}>{$text}</option>
    {/if}
{/template}

/**
 * @param? id
 * @param? extraClasses
 * @param? extraAttributes
 * @param content
 */
{template .value}
    <span{if $id} id="{$id}"{/if} class="field-value{call atlassian.renderExtraClasses data="all" /}"
        {call atlassian.renderExtraAttributes data="all" /}>
        {$content |noAutoescape}
    </span>
{/template}

/**
 * Not meant for direct public use.
 *
 * This is a generic template for rendering a field-group with a label, input, description, errors, and inline-help.
 * The $type parameter is heavily used to determine the structure of the rendered HTML., and which of the other
 * @params are actually used.
 *
 * When $type is invalid or not provided, no label or input will be rendered.  Otherwise, $id and $labelContent are required @params.
 *
 * @param? type a valid <input/> value (HTML5 new types aren't yet supported), 'textarea', 'select', or 'value' (for a display-only value)
 * @param? id id of the input. If a valid type is provided, then $id is required.
 * @param? name $name defaults to $id if not provided.
 * @param? value At most one of $value or $options should be specified. $value is for inputs, textareas, and 'value' types.
 * @param? options At most one of $value or $options should be specified. $options is for 'select' types.
 * @param? isChecked (only valid for checkboxes or radio buttons)
 * @param? isDisabled
 * @param? maxLength (only valid for text)
 * @param? size (only valid for text and selects)
 * @param? isMultiple (only valid for selects)
 * @param? rows (only valid for textareas)
 * @param? cols (only valid for textareas)
 * @param? labelContent if a valid $type is provided, then $labelContent is required.
 * @param? isRequired
 * @param? descriptionText
 * @param? errorTexts
 * @param? extraClasses
 * @param? extraAttributes
 */
{template .field private="true"}
    {let $isCheckboxOrRadio: $type == 'checkbox' or $type == 'radio' /}
    <div class="{if $isCheckboxOrRadio}{$type}{else}field-group{/if}{call atlassian.renderExtraClasses data="all" /}"
        {call atlassian.renderExtraAttributes data="all" /}>
        //checkbox and radio labels go after the input
        {if $labelContent and not $isCheckboxOrRadio}
            {call .label}
                {param forField : $id /}
                {param isRequired : $isRequired /}
                {param content : $labelContent /}
            {/call}
        {/if}
        {switch $type}
            {case 'textarea'}
                {call .textarea}
                    {param id: $id /}
                    {param name: $name /}
                    {param value: $value /}
                    {param rows: $rows /}
                    {param cols: $cols /}
                    {param isDisabled: $isDisabled ? true : false /}  // this inefficent syntax circumvents a bug in Soy - http://code.google.com/p/closure-templates/issues/detail?id=55
                {/call}
            {case 'select'}
                {call .select}
                    {param id: $id /}
                    {param name: $name /}
                    {param options: $options /}
                    {param isMultiple: $isMultiple /}
                    {param size: $size /}
                    {param isDisabled: $isDisabled ? true : false /}  // this inefficent syntax circumvents a bug in Soy - http://code.google.com/p/closure-templates/issues/detail?id=55
                {/call}
            {case 'value'}
                {call .value}
                    {param id: $id /}
                    {param content}{$value|escapeHtml}{/param}
                {/call}
            {case 'text', 'password', 'file', 'radio', 'checkbox', 'button', 'submit', 'reset' }
                {call .input}
                    {param id: $id /}
                    {param name: $name /}
                    {param type: $type /}
                    {param value: $value /}
                    {param maxLength: $maxLength /}
                    {param size: $size /}
                    {param isChecked: $isChecked /}
                    {param isDisabled: $isDisabled ? true : false /}  // this inefficent syntax circumvents a bug in Soy - http://code.google.com/p/closure-templates/issues/detail?id=55
                {/call}
            // default - no input of any kind. For use displaying checkbox/radio fieldset errors and descriptions
        {/switch}
        //checkbox and radio labels go after the input
        {if $labelContent and $isCheckboxOrRadio}
            {call .label}
                {param forField : $id /}
                {param isRequired : $isRequired /}
                {param content : $labelContent /}
            {/call}
        {/if}
        {if $descriptionText}
            {call .fieldDescription}{param message : $descriptionText /}{/call}
        {/if}
        {if $errorTexts}
            {foreach $error in $errorTexts}
                {call .fieldError}
                    {param message: $error/}
                {/call}
            {/foreach}
        {/if}
    </div>
{/template}

/**
 * @param message
 * @param? extraClasses
 */
{template .fieldError}
    <div class="error{call atlassian.renderExtraClasses data="all" /}">{$message}</div>
{/template}

/**
 * @param message
 * @param? extraClasses
 */
{template .fieldDescription}
    <div class="description{call atlassian.renderExtraClasses data="all" /}">{$message}</div>
{/template}

/**
 * @param id
 * @param? name defaults to $id
 * @param labelContent
 * @param? value
 * @param? maxLength
 * @param? size
 * @param? isRequired
 * @param? isDisabled
 * @param? descriptionText
 * @param? errorTexts
 * @param? extraClasses
 * @param? extraAttributes
 */
{template .textField}
    {call .field}
        {param id: $id /}
        {param name: $name /}
        {param type: 'text' /}
        {param labelContent: $labelContent /}
        {param value: $value /}
        {param maxLength: $maxLength /}
        {param size: $size /}
        {param isRequired: $isRequired /}
        {param isDisabled: $isDisabled /}
        {param descriptionText: $descriptionText /}
        {param errorTexts: $errorTexts /}
        {param extraClasses: $extraClasses /}
        {param extraAttributes: $extraAttributes /}
    {/call}
{/template}

/**
 * @param id
 * @param? name defaults to $id
 * @param labelContent
 * @param? value
 * @param? rows
 * @param? cols
 * @param? isRequired
 * @param? isDisabled
 * @param? descriptionText
 * @param? errorTexts
 * @param? extraClasses
 * @param? extraAttributes
 */
{template .textareaField}
    {call .field}
        {param id: $id /}
        {param name: $name /}
        {param type: 'textarea' /}
        {param labelContent: $labelContent /}
        {param value: $value /}
        {param rows: $rows /}
        {param cols: $cols /}
        {param isRequired: $isRequired /}
        {param isDisabled: $isDisabled /}
        {param descriptionText: $descriptionText /}
        {param errorTexts: $errorTexts /}
        {param extraClasses: $extraClasses /}
        {param extraAttributes: $extraAttributes /}
    {/call}
{/template}

/**
 * @param id
 * @param? name defaults to $id
 * @param labelContent
 * @param? value
 * @param? isRequired
 * @param? isDisabled
 * @param? descriptionText
 * @param? errorTexts
 * @param? extraClasses
 * @param? extraAttributes
 */
{template .passwordField}
    {call .field}
        {param id: $id /}
        {param name: $name /}
        {param type: 'password' /}
        {param labelContent: $labelContent /}
        {param value: $value /}
        {param isRequired: $isRequired /}
        {param isDisabled: $isDisabled /}
        {param descriptionText: $descriptionText /}
        {param errorTexts: $errorTexts /}
        {param extraClasses: $extraClasses /}
        {param extraAttributes: $extraAttributes /}
    {/call}
{/template}

/**
 * @param id
 * @param? name defaults to $id
 * @param labelContent
 * @param? value
 * @param? isRequired
 * @param? isDisabled
 * @param? descriptionText
 * @param? errorTexts
 * @param? extraClasses
 * @param? extraAttributes
 */
{template .fileField}
    {call .field}
        {param id: $id /}
        {param name: $name /}
        {param type: 'file' /}
        {param labelContent: $labelContent /}
        {param value: $value /}
        {param isRequired: $isRequired /}
        {param isDisabled: $isDisabled /}
        {param descriptionText: $descriptionText /}
        {param errorTexts: $errorTexts /}
        {param extraClasses: $extraClasses /}
        {param extraAttributes: $extraAttributes /}
    {/call}
{/template}

/**
 * See the SoyDoc for .select for info on using the $options param.
 * @param id
 * @param? name defaults to $id
 * @param labelContent
 * @param options
 * @param? isMultiple
 * @param? size
 * @param? isRequired
 * @param? isDisabled
 * @param? descriptionText
 * @param? errorTexts
 * @param? extraClasses
 * @param? extraAttributes
 */
{template .selectField}
    {call .field}
        {param id: $id /}
        {param name: $name /}
        {param type: 'select' /}
        {param labelContent: $labelContent /}
        {param options: $options /}
        {param isMultiple: $isMultiple /}
        {param size: $size /}
        {param isRequired: $isRequired /}
        {param isDisabled: $isDisabled /}
        {param descriptionText: $descriptionText /}
        {param errorTexts: $errorTexts /}
        {param extraClasses: $extraClasses /}
        {param extraAttributes: $extraAttributes /}
    {/call}
{/template}

/**
 * @param? id id of the fieldset element
 * @param legendContent
 * @param fields a list of objects in the format [ id :, name? :, labelText :, isChecked? :, isDisabled? :, descriptionText? :, errorTexts? :, extraClasses? :, extraAttributes? : ]
 * @param? isRequired
 * @param? isMatrix
 * @param? descriptionText
 * @param? errorTexts
 * @param? extraClasses
 * @param? extraAttributes
 */
{template .checkboxField}
    {call .fieldset}
        {param legendContent : $legendContent + ($isRequired ? '<span class="aui-icon icon-required"></span>' : '') /}
        {param isGroup : true /}
        {param id : $id /}
        {param extraClasses: $extraClasses /}
        {param extraAttributes: $extraAttributes /}
        {param content}
            {if $isMatrix}<div class="matrix">{/if}
            {foreach $field in $fields}
                {call .field data="$field"}
                    {param type: 'checkbox' /}
                    {param id: $field.id /}
                    {param name: $field.name /}
                    {param labelContent}{$field.labelText}{/param}
                    {param isChecked: $field.isChecked /}
                    {param isDisabled: $field.isDisabled /}
                    {param descriptionText: $field.descriptionText /}
                    {param errorTexts: $field.errorTexts /}
                    {param extraClasses: $field.extraClasses /}
                    {param extraAttributes: $field.extraAttributes /}
                {/call}
            {/foreach}
            {if $isMatrix}</div>{/if}

            {if $descriptionText or ($errorTexts and length($errorTexts))}
                {call .field}
                    {param descriptionText: $descriptionText /}
                    {param errorTexts: $errorTexts /}
                    {param isDisabled : false /} // this superfluous definition circumvents a bug in Soy - http://code.google.com/p/closure-templates/issues/detail?id=55
                {/call}
            {/if}
        {/param}
    {/call}
{/template}

/**
 * @param? id id of the fieldset element
 * @param? name the name given to each radio input. $name defaults to $id if not provided.
 * @param legendContent
 * @param fields a list of objects in the format [ id :, labelText :, value :, isChecked? :, isDisabled? :, descriptionText? :, errorTexts? :, extraClasses? :, extraAttributes? : ]
 * @param? isRequired
 * @param? isMatrix
 * @param? descriptionText
 * @param? errorTexts
 * @param? extraClasses
 * @param? extraAttributes
 */
{template .radioField}
    {call .fieldset}
        {param legendContent : $legendContent + ($isRequired ? '<span class="aui-icon icon-required"></span>' : '') /}
        {param isGroup : true /}
        {param id : $id /}
        {param extraClasses: $extraClasses /}
        {param extraAttributes: $extraAttributes /}
        {param content}
            {if $isMatrix}<div class="matrix">{/if}
            {foreach $field in $fields}
                {call .field data="$field"}
                    {param type: 'radio' /}
                    {param name: $name ? $name : $id /}
                    {param value: $field.value /}
                    {param id: $field.id /}
                    {param labelContent}{$field.labelText}{/param}
                    {param isChecked: $field.isChecked /}
                    {param isDisabled: $field.isDisabled /}
                    {param descriptionText: $field.descriptionText /}
                    {param errorTexts: $field.errorTexts /}
                    {param extraClasses: $field.extraClasses /}
                    {param extraAttributes: $field.extraAttributes /}
                {/call}
            {/foreach}
            {if $isMatrix}</div>{/if}

            {if $descriptionText or ($errorTexts and length($errorTexts))}
                {call .field}
                    {param descriptionText: $descriptionText /}
                    {param errorTexts: $errorTexts /}
                    {param isDisabled : false /} // this superfluous definition circumvents a bug in Soy - http://code.google.com/p/closure-templates/issues/detail?id=55
                {/call}
            {/if}
        {/param}
    {/call}
{/template}

/**
 * @param id id of the input.
 * @param value
 * @param labelContent
 * @param? isRequired
 * @param? descriptionText
 * @param? errorTexts
 * @param? extraClasses
 * @param? extraAttributes
 */
{template .valueField}
    {call .field}
        {param id: $id /}
        {param type: 'value' /}
        {param value: $value /}
        {param labelContent: $labelContent /}
        {param isRequired: $isRequired /}
        {param descriptionText: $descriptionText /}
        {param errorTexts: $errorTexts /}
        {param extraClasses: $extraClasses /}
        {param extraAttributes: $extraAttributes /}
    {/call}
{/template}